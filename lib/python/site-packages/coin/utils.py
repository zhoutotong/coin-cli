# -*- coding: utf-8 -*-
#！/bin/env python3
import os
import platform
import distro
import subprocess

# log out info message, color with green
def info(msg):
    print(f"\033[32m{msg}\033[0m")
    
# log out error message, color with red
def error(msg):
    print(f"\033[31m{msg}\033[0m")
    
# log out warn message, color with yellow
def warn(msg):
    print(f"\033[33m{msg}\033[0m")
    
def os_tag():
    tag = '{}{}_{}'.format(distro.name(), distro.version(), platform.machine())
    return tag

def exec_proc(cmd):
    
    if is_root():
        cmd = cmd.replace('@sudo', '')
    else:
        cmd = cmd.replace('@sudo', 'sudo')
    # remove space of the head of the command
    cmd = cmd.lstrip()
    # try:
    subprocess.run(cmd, shell=True, check=True, capture_output=False)
#     except subprocess.CalledProcessError as e:
#         # error(f'failed to execute command: {cmd}, stdout: {e.stdout.decode('utf-8')} error: {e.stderr.decode('utf-8')}')
#         error_report = '''>>command:
# ---
# {}

# >>stdout:
# ---
# {}

# >>stderr:
# ---
# {}'''.format(cmd, e.stdout.decode('utf-8'), e.stderr.decode('utf-8'))
#         error(error_report)
#         return False
    
def is_root():
    return os.getuid() == 0

def coin_root():
    return os.environ['COIN_ROOT']

def solution_path(sn):
    return os.path.join(coin_root(), 'solution', sn)